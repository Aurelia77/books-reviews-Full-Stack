generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Book {
  id            String         @id @default(cuid())
  title         String
  authors       String[]
  description   String
  categories    String[]
  pageCount     Int
  publishedDate String
  publisher     String
  imageLink     String
  language      String
  isFromAPI     Boolean
  totalRating   Int
  countRating   Int
  UserInfoBook  UserInfoBook[]
}

model AppUser {
  id           String         @id @default(cuid())
  email        String         @unique
  userName     String
  imgURL       String
  description  String
  friends      String[]
  isAdmin      Boolean
  UserInfoBook UserInfoBook[]
}

model UserInfoBook {
  id       String     @id @default(cuid())
  user     AppUser    @relation(fields: [userId], references: [id])
  userId   String
  bookId   String
  book     Book       @relation(fields: [bookId], references: [id])
  year     Int?
  month    Int?
  note     Int?
  comments String?
  status   BookStatus

  @@unique([userId, bookId]) //  UNIQUE composite key
  @@map("BookInfo")
}

enum BookStatus {
  READ
  IN_PROGRESS
  TO_READ
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
